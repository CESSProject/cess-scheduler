// WARNING: This file has automatically been generated
// Code generated by https://git.io/c-for-go. DO NOT EDIT.

package generated

/*
#cgo LDFLAGS: -L${SRCDIR}/..
#cgo pkg-config: ${SRCDIR}/../cesscrypto.pc
#include "../cesscrypto.h"
#include <stdlib.h>
#include "cgo_helpers.h"
*/
import "C"
import (
	"runtime"
	"unsafe"
)

// CessAggregate function as declared in cess-ffi/cesscrypto.h:379
func CessAggregate(flattenedSignaturesPtr []byte, flattenedSignaturesLen uint) *CessAggregateResponse {
	cflattenedSignaturesPtr, cflattenedSignaturesPtrAllocMap := copyPUint8TBytes((*sliceHeader)(unsafe.Pointer(&flattenedSignaturesPtr)))
	cflattenedSignaturesLen, cflattenedSignaturesLenAllocMap := (C.size_t)(flattenedSignaturesLen), cgoAllocsUnknown
	__ret := C.cess_aggregate(cflattenedSignaturesPtr, cflattenedSignaturesLen)
	runtime.KeepAlive(cflattenedSignaturesLenAllocMap)
	runtime.KeepAlive(cflattenedSignaturesPtrAllocMap)
	__v := NewCessAggregateResponseRef(unsafe.Pointer(__ret))
	return __v
}

// CessAggregateSealProofs function as declared in cess-ffi/cesscrypto.h:382
func CessAggregateSealProofs(registeredProof CessRegisteredSealProof, registeredAggregation CessRegisteredAggregationProof, commRsPtr []Cess32ByteArray, commRsLen uint, seedsPtr []Cess32ByteArray, seedsLen uint, sealCommitResponsesPtr []CessSealCommitPhase2Response, sealCommitResponsesLen uint) *CessAggregateProof {
	cregisteredProof, cregisteredProofAllocMap := (C.cess_RegisteredSealProof)(registeredProof), cgoAllocsUnknown
	cregisteredAggregation, cregisteredAggregationAllocMap := (C.cess_RegisteredAggregationProof)(registeredAggregation), cgoAllocsUnknown
	ccommRsPtr, ccommRsPtrAllocMap := unpackArgSCess32ByteArray(commRsPtr)
	ccommRsLen, ccommRsLenAllocMap := (C.size_t)(commRsLen), cgoAllocsUnknown
	cseedsPtr, cseedsPtrAllocMap := unpackArgSCess32ByteArray(seedsPtr)
	cseedsLen, cseedsLenAllocMap := (C.size_t)(seedsLen), cgoAllocsUnknown
	csealCommitResponsesPtr, csealCommitResponsesPtrAllocMap := unpackArgSCessSealCommitPhase2Response(sealCommitResponsesPtr)
	csealCommitResponsesLen, csealCommitResponsesLenAllocMap := (C.size_t)(sealCommitResponsesLen), cgoAllocsUnknown
	__ret := C.cess_aggregate_seal_proofs(cregisteredProof, cregisteredAggregation, ccommRsPtr, ccommRsLen, cseedsPtr, cseedsLen, csealCommitResponsesPtr, csealCommitResponsesLen)
	runtime.KeepAlive(csealCommitResponsesLenAllocMap)
	packSCessSealCommitPhase2Response(sealCommitResponsesPtr, csealCommitResponsesPtr)
	runtime.KeepAlive(csealCommitResponsesPtrAllocMap)
	runtime.KeepAlive(cseedsLenAllocMap)
	packSCess32ByteArray(seedsPtr, cseedsPtr)
	runtime.KeepAlive(cseedsPtrAllocMap)
	runtime.KeepAlive(ccommRsLenAllocMap)
	packSCess32ByteArray(commRsPtr, ccommRsPtr)
	runtime.KeepAlive(ccommRsPtrAllocMap)
	runtime.KeepAlive(cregisteredAggregationAllocMap)
	runtime.KeepAlive(cregisteredProofAllocMap)
	__v := NewCessAggregateProofRef(unsafe.Pointer(__ret))
	return __v
}

// CessClearCache function as declared in cess-ffi/cesscrypto.h:391
func CessClearCache(sectorSize uint64, cacheDirPath string) *CessClearCacheResponse {
	csectorSize, csectorSizeAllocMap := (C.uint64_t)(sectorSize), cgoAllocsUnknown
	cacheDirPath = safeString(cacheDirPath)
	ccacheDirPath, ccacheDirPathAllocMap := unpackPCharString(cacheDirPath)
	__ret := C.cess_clear_cache(csectorSize, ccacheDirPath)
	runtime.KeepAlive(cacheDirPath)
	runtime.KeepAlive(ccacheDirPathAllocMap)
	runtime.KeepAlive(csectorSizeAllocMap)
	__v := NewCessClearCacheResponseRef(unsafe.Pointer(__ret))
	return __v
}

// CessCreateZeroSignature function as declared in cess-ffi/cesscrypto.h:398
func CessCreateZeroSignature() *CessZeroSignatureResponse {
	__ret := C.cess_create_zero_signature()
	__v := NewCessZeroSignatureResponseRef(unsafe.Pointer(__ret))
	return __v
}

// CessDestroyAggregateProof function as declared in cess-ffi/cesscrypto.h:404
func CessDestroyAggregateProof(ptr *CessAggregateProof) {
	cptr, cptrAllocMap := ptr.PassRef()
	C.cess_destroy_aggregate_proof(cptr)
	runtime.KeepAlive(cptrAllocMap)
}

// CessDestroyAggregateResponse function as declared in cess-ffi/cesscrypto.h:406
func CessDestroyAggregateResponse(ptr *CessAggregateResponse) {
	cptr, cptrAllocMap := ptr.PassRef()
	C.cess_destroy_aggregate_response(cptr)
	runtime.KeepAlive(cptrAllocMap)
}

// CessDestroyClearCacheResponse function as declared in cess-ffi/cesscrypto.h:408
func CessDestroyClearCacheResponse(ptr *CessClearCacheResponse) {
	cptr, cptrAllocMap := ptr.PassRef()
	C.cess_destroy_clear_cache_response(cptr)
	runtime.KeepAlive(cptrAllocMap)
}

// CessDestroyFauxrepResponse function as declared in cess-ffi/cesscrypto.h:410
func CessDestroyFauxrepResponse(ptr *CessFauxRepResponse) {
	cptr, cptrAllocMap := ptr.PassRef()
	C.cess_destroy_fauxrep_response(cptr)
	runtime.KeepAlive(cptrAllocMap)
}

// CessDestroyFinalizeTicketResponse function as declared in cess-ffi/cesscrypto.h:412
func CessDestroyFinalizeTicketResponse(ptr *CessFinalizeTicketResponse) {
	cptr, cptrAllocMap := ptr.PassRef()
	C.cess_destroy_finalize_ticket_response(cptr)
	runtime.KeepAlive(cptrAllocMap)
}

// CessDestroyGenerateDataCommitmentResponse function as declared in cess-ffi/cesscrypto.h:414
func CessDestroyGenerateDataCommitmentResponse(ptr *CessGenerateDataCommitmentResponse) {
	cptr, cptrAllocMap := ptr.PassRef()
	C.cess_destroy_generate_data_commitment_response(cptr)
	runtime.KeepAlive(cptrAllocMap)
}

// CessDestroyGenerateFallbackSectorChallengesResponse function as declared in cess-ffi/cesscrypto.h:416
func CessDestroyGenerateFallbackSectorChallengesResponse(ptr *CessGenerateFallbackSectorChallengesResponse) {
	cptr, cptrAllocMap := ptr.PassRef()
	C.cess_destroy_generate_fallback_sector_challenges_response(cptr)
	runtime.KeepAlive(cptrAllocMap)
}

// CessDestroyGeneratePieceCommitmentResponse function as declared in cess-ffi/cesscrypto.h:418
func CessDestroyGeneratePieceCommitmentResponse(ptr *CessGeneratePieceCommitmentResponse) {
	cptr, cptrAllocMap := ptr.PassRef()
	C.cess_destroy_generate_piece_commitment_response(cptr)
	runtime.KeepAlive(cptrAllocMap)
}

// CessDestroyGenerateSingleVanillaProofResponse function as declared in cess-ffi/cesscrypto.h:420
func CessDestroyGenerateSingleVanillaProofResponse(ptr *CessGenerateSingleVanillaProofResponse) {
	cptr, cptrAllocMap := ptr.PassRef()
	C.cess_destroy_generate_single_vanilla_proof_response(cptr)
	runtime.KeepAlive(cptrAllocMap)
}

// CessDestroyGenerateSingleWindowPostWithVanillaResponse function as declared in cess-ffi/cesscrypto.h:422
func CessDestroyGenerateSingleWindowPostWithVanillaResponse(ptr *CessGenerateSingleWindowPoStWithVanillaResponse) {
	cptr, cptrAllocMap := ptr.PassRef()
	C.cess_destroy_generate_single_window_post_with_vanilla_response(cptr)
	runtime.KeepAlive(cptrAllocMap)
}

// CessDestroyGenerateWindowPostResponse function as declared in cess-ffi/cesscrypto.h:424
func CessDestroyGenerateWindowPostResponse(ptr *CessGenerateWindowPoStResponse) {
	cptr, cptrAllocMap := ptr.PassRef()
	C.cess_destroy_generate_window_post_response(cptr)
	runtime.KeepAlive(cptrAllocMap)
}

// CessDestroyGenerateWinningPostResponse function as declared in cess-ffi/cesscrypto.h:426
func CessDestroyGenerateWinningPostResponse(ptr *CessGenerateWinningPoStResponse) {
	cptr, cptrAllocMap := ptr.PassRef()
	C.cess_destroy_generate_winning_post_response(cptr)
	runtime.KeepAlive(cptrAllocMap)
}

// CessDestroyGenerateWinningPostSectorChallenge function as declared in cess-ffi/cesscrypto.h:428
func CessDestroyGenerateWinningPostSectorChallenge(ptr *CessGenerateWinningPoStSectorChallenge) {
	cptr, cptrAllocMap := ptr.PassRef()
	C.cess_destroy_generate_winning_post_sector_challenge(cptr)
	runtime.KeepAlive(cptrAllocMap)
}

// CessDestroyGetNumPartitionForFallbackPostResponse function as declared in cess-ffi/cesscrypto.h:430
func CessDestroyGetNumPartitionForFallbackPostResponse(ptr *CessGetNumPartitionForFallbackPoStResponse) {
	cptr, cptrAllocMap := ptr.PassRef()
	C.cess_destroy_get_num_partition_for_fallback_post_response(cptr)
	runtime.KeepAlive(cptrAllocMap)
}

// CessDestroyGpuDeviceResponse function as declared in cess-ffi/cesscrypto.h:432
func CessDestroyGpuDeviceResponse(ptr *CessGpuDeviceResponse) {
	cptr, cptrAllocMap := ptr.PassRef()
	C.cess_destroy_gpu_device_response(cptr)
	runtime.KeepAlive(cptrAllocMap)
}

// CessDestroyHashResponse function as declared in cess-ffi/cesscrypto.h:434
func CessDestroyHashResponse(ptr *CessHashResponse) {
	cptr, cptrAllocMap := ptr.PassRef()
	C.cess_destroy_hash_response(cptr)
	runtime.KeepAlive(cptrAllocMap)
}

// CessDestroyInitLogFdResponse function as declared in cess-ffi/cesscrypto.h:436
func CessDestroyInitLogFdResponse(ptr *CessInitLogFdResponse) {
	cptr, cptrAllocMap := ptr.PassRef()
	C.cess_destroy_init_log_fd_response(cptr)
	runtime.KeepAlive(cptrAllocMap)
}

// CessDestroyMergeWindowPostPartitionProofsResponse function as declared in cess-ffi/cesscrypto.h:438
func CessDestroyMergeWindowPostPartitionProofsResponse(ptr *CessMergeWindowPoStPartitionProofsResponse) {
	cptr, cptrAllocMap := ptr.PassRef()
	C.cess_destroy_merge_window_post_partition_proofs_response(cptr)
	runtime.KeepAlive(cptrAllocMap)
}

// CessDestroyPrivateKeyGenerateResponse function as declared in cess-ffi/cesscrypto.h:440
func CessDestroyPrivateKeyGenerateResponse(ptr *CessPrivateKeyGenerateResponse) {
	cptr, cptrAllocMap := ptr.PassRef()
	C.cess_destroy_private_key_generate_response(cptr)
	runtime.KeepAlive(cptrAllocMap)
}

// CessDestroyPrivateKeyPublicKeyResponse function as declared in cess-ffi/cesscrypto.h:442
func CessDestroyPrivateKeyPublicKeyResponse(ptr *CessPrivateKeyPublicKeyResponse) {
	cptr, cptrAllocMap := ptr.PassRef()
	C.cess_destroy_private_key_public_key_response(cptr)
	runtime.KeepAlive(cptrAllocMap)
}

// CessDestroyPrivateKeySignResponse function as declared in cess-ffi/cesscrypto.h:444
func CessDestroyPrivateKeySignResponse(ptr *CessPrivateKeySignResponse) {
	cptr, cptrAllocMap := ptr.PassRef()
	C.cess_destroy_private_key_sign_response(cptr)
	runtime.KeepAlive(cptrAllocMap)
}

// CessDestroySealCommitPhase1Response function as declared in cess-ffi/cesscrypto.h:446
func CessDestroySealCommitPhase1Response(ptr *CessSealCommitPhase1Response) {
	cptr, cptrAllocMap := ptr.PassRef()
	C.cess_destroy_seal_commit_phase1_response(cptr)
	runtime.KeepAlive(cptrAllocMap)
}

// CessDestroySealCommitPhase2Response function as declared in cess-ffi/cesscrypto.h:448
func CessDestroySealCommitPhase2Response(ptr *CessSealCommitPhase2Response) {
	cptr, cptrAllocMap := ptr.PassRef()
	C.cess_destroy_seal_commit_phase2_response(cptr)
	runtime.KeepAlive(cptrAllocMap)
}

// CessDestroySealPreCommitPhase1Response function as declared in cess-ffi/cesscrypto.h:450
func CessDestroySealPreCommitPhase1Response(ptr *CessSealPreCommitPhase1Response) {
	cptr, cptrAllocMap := ptr.PassRef()
	C.cess_destroy_seal_pre_commit_phase1_response(cptr)
	runtime.KeepAlive(cptrAllocMap)
}

// CessDestroySealPreCommitPhase2Response function as declared in cess-ffi/cesscrypto.h:452
func CessDestroySealPreCommitPhase2Response(ptr *CessSealPreCommitPhase2Response) {
	cptr, cptrAllocMap := ptr.PassRef()
	C.cess_destroy_seal_pre_commit_phase2_response(cptr)
	runtime.KeepAlive(cptrAllocMap)
}

// CessDestroyStringResponse function as declared in cess-ffi/cesscrypto.h:454
func CessDestroyStringResponse(ptr *CessStringResponse) {
	cptr, cptrAllocMap := ptr.PassRef()
	C.cess_destroy_string_response(cptr)
	runtime.KeepAlive(cptrAllocMap)
}

// CessDestroyUnsealRangeResponse function as declared in cess-ffi/cesscrypto.h:456
func CessDestroyUnsealRangeResponse(ptr *CessUnsealRangeResponse) {
	cptr, cptrAllocMap := ptr.PassRef()
	C.cess_destroy_unseal_range_response(cptr)
	runtime.KeepAlive(cptrAllocMap)
}

// CessDestroyVerifyAggregateSealResponse function as declared in cess-ffi/cesscrypto.h:462
func CessDestroyVerifyAggregateSealResponse(ptr *CessVerifyAggregateSealProofResponse) {
	cptr, cptrAllocMap := ptr.PassRef()
	C.cess_destroy_verify_aggregate_seal_response(cptr)
	runtime.KeepAlive(cptrAllocMap)
}

// CessDestroyVerifySealResponse function as declared in cess-ffi/cesscrypto.h:468
func CessDestroyVerifySealResponse(ptr *CessVerifySealResponse) {
	cptr, cptrAllocMap := ptr.PassRef()
	C.cess_destroy_verify_seal_response(cptr)
	runtime.KeepAlive(cptrAllocMap)
}

// CessDestroyVerifyWindowPostResponse function as declared in cess-ffi/cesscrypto.h:470
func CessDestroyVerifyWindowPostResponse(ptr *CessVerifyWindowPoStResponse) {
	cptr, cptrAllocMap := ptr.PassRef()
	C.cess_destroy_verify_window_post_response(cptr)
	runtime.KeepAlive(cptrAllocMap)
}

// CessDestroyVerifyWinningPostResponse function as declared in cess-ffi/cesscrypto.h:476
func CessDestroyVerifyWinningPostResponse(ptr *CessVerifyWinningPoStResponse) {
	cptr, cptrAllocMap := ptr.PassRef()
	C.cess_destroy_verify_winning_post_response(cptr)
	runtime.KeepAlive(cptrAllocMap)
}

// CessDestroyWriteWithAlignmentResponse function as declared in cess-ffi/cesscrypto.h:478
func CessDestroyWriteWithAlignmentResponse(ptr *CessWriteWithAlignmentResponse) {
	cptr, cptrAllocMap := ptr.PassRef()
	C.cess_destroy_write_with_alignment_response(cptr)
	runtime.KeepAlive(cptrAllocMap)
}

// CessDestroyWriteWithoutAlignmentResponse function as declared in cess-ffi/cesscrypto.h:480
func CessDestroyWriteWithoutAlignmentResponse(ptr *CessWriteWithoutAlignmentResponse) {
	cptr, cptrAllocMap := ptr.PassRef()
	C.cess_destroy_write_without_alignment_response(cptr)
	runtime.KeepAlive(cptrAllocMap)
}

// CessDestroyZeroSignatureResponse function as declared in cess-ffi/cesscrypto.h:482
func CessDestroyZeroSignatureResponse(ptr *CessZeroSignatureResponse) {
	cptr, cptrAllocMap := ptr.PassRef()
	C.cess_destroy_zero_signature_response(cptr)
	runtime.KeepAlive(cptrAllocMap)
}

// CessDropSignature function as declared in cess-ffi/cesscrypto.h:487
func CessDropSignature(sig []byte) {
	csig, csigAllocMap := copyPUint8TBytes((*sliceHeader)(unsafe.Pointer(&sig)))
	C.cess_drop_signature(csig)
	runtime.KeepAlive(csigAllocMap)
}

// CessFauxrep function as declared in cess-ffi/cesscrypto.h:489
func CessFauxrep(registeredProof CessRegisteredSealProof, cacheDirPath string, sealedSectorPath string) *CessFauxRepResponse {
	cregisteredProof, cregisteredProofAllocMap := (C.cess_RegisteredSealProof)(registeredProof), cgoAllocsUnknown
	cacheDirPath = safeString(cacheDirPath)
	ccacheDirPath, ccacheDirPathAllocMap := unpackPCharString(cacheDirPath)
	sealedSectorPath = safeString(sealedSectorPath)
	csealedSectorPath, csealedSectorPathAllocMap := unpackPCharString(sealedSectorPath)
	__ret := C.cess_fauxrep(cregisteredProof, ccacheDirPath, csealedSectorPath)
	runtime.KeepAlive(sealedSectorPath)
	runtime.KeepAlive(csealedSectorPathAllocMap)
	runtime.KeepAlive(cacheDirPath)
	runtime.KeepAlive(ccacheDirPathAllocMap)
	runtime.KeepAlive(cregisteredProofAllocMap)
	__v := NewCessFauxRepResponseRef(unsafe.Pointer(__ret))
	return __v
}

// CessFauxrep2 function as declared in cess-ffi/cesscrypto.h:493
func CessFauxrep2(registeredProof CessRegisteredSealProof, cacheDirPath string, existingPAuxPath string) *CessFauxRepResponse {
	cregisteredProof, cregisteredProofAllocMap := (C.cess_RegisteredSealProof)(registeredProof), cgoAllocsUnknown
	cacheDirPath = safeString(cacheDirPath)
	ccacheDirPath, ccacheDirPathAllocMap := unpackPCharString(cacheDirPath)
	existingPAuxPath = safeString(existingPAuxPath)
	cexistingPAuxPath, cexistingPAuxPathAllocMap := unpackPCharString(existingPAuxPath)
	__ret := C.cess_fauxrep2(cregisteredProof, ccacheDirPath, cexistingPAuxPath)
	runtime.KeepAlive(existingPAuxPath)
	runtime.KeepAlive(cexistingPAuxPathAllocMap)
	runtime.KeepAlive(cacheDirPath)
	runtime.KeepAlive(ccacheDirPathAllocMap)
	runtime.KeepAlive(cregisteredProofAllocMap)
	__v := NewCessFauxRepResponseRef(unsafe.Pointer(__ret))
	return __v
}

// CessGenerateDataCommitment function as declared in cess-ffi/cesscrypto.h:500
func CessGenerateDataCommitment(registeredProof CessRegisteredSealProof, piecesPtr []CessPublicPieceInfo, piecesLen uint) *CessGenerateDataCommitmentResponse {
	cregisteredProof, cregisteredProofAllocMap := (C.cess_RegisteredSealProof)(registeredProof), cgoAllocsUnknown
	cpiecesPtr, cpiecesPtrAllocMap := unpackArgSCessPublicPieceInfo(piecesPtr)
	cpiecesLen, cpiecesLenAllocMap := (C.size_t)(piecesLen), cgoAllocsUnknown
	__ret := C.cess_generate_data_commitment(cregisteredProof, cpiecesPtr, cpiecesLen)
	runtime.KeepAlive(cpiecesLenAllocMap)
	packSCessPublicPieceInfo(piecesPtr, cpiecesPtr)
	runtime.KeepAlive(cpiecesPtrAllocMap)
	runtime.KeepAlive(cregisteredProofAllocMap)
	__v := NewCessGenerateDataCommitmentResponseRef(unsafe.Pointer(__ret))
	return __v
}

// CessGenerateFallbackSectorChallenges function as declared in cess-ffi/cesscrypto.h:508
func CessGenerateFallbackSectorChallenges(registeredProof CessRegisteredPoStProof, randomness Cess32ByteArray, sectorIdsPtr []uint64, sectorIdsLen uint, proverId Cess32ByteArray) *CessGenerateFallbackSectorChallengesResponse {
	cregisteredProof, cregisteredProofAllocMap := (C.cess_RegisteredPoStProof)(registeredProof), cgoAllocsUnknown
	crandomness, crandomnessAllocMap := randomness.PassValue()
	csectorIdsPtr, csectorIdsPtrAllocMap := copyPUint64TBytes((*sliceHeader)(unsafe.Pointer(&sectorIdsPtr)))
	csectorIdsLen, csectorIdsLenAllocMap := (C.size_t)(sectorIdsLen), cgoAllocsUnknown
	cproverId, cproverIdAllocMap := proverId.PassValue()
	__ret := C.cess_generate_fallback_sector_challenges(cregisteredProof, crandomness, csectorIdsPtr, csectorIdsLen, cproverId)
	runtime.KeepAlive(cproverIdAllocMap)
	runtime.KeepAlive(csectorIdsLenAllocMap)
	runtime.KeepAlive(csectorIdsPtrAllocMap)
	runtime.KeepAlive(crandomnessAllocMap)
	runtime.KeepAlive(cregisteredProofAllocMap)
	__v := NewCessGenerateFallbackSectorChallengesResponseRef(unsafe.Pointer(__ret))
	return __v
}

// CessGeneratePieceCommitment function as declared in cess-ffi/cesscrypto.h:518
func CessGeneratePieceCommitment(registeredProof CessRegisteredSealProof, pieceFdRaw int32, unpaddedPieceSize uint64) *CessGeneratePieceCommitmentResponse {
	cregisteredProof, cregisteredProofAllocMap := (C.cess_RegisteredSealProof)(registeredProof), cgoAllocsUnknown
	cpieceFdRaw, cpieceFdRawAllocMap := (C.int)(pieceFdRaw), cgoAllocsUnknown
	cunpaddedPieceSize, cunpaddedPieceSizeAllocMap := (C.uint64_t)(unpaddedPieceSize), cgoAllocsUnknown
	__ret := C.cess_generate_piece_commitment(cregisteredProof, cpieceFdRaw, cunpaddedPieceSize)
	runtime.KeepAlive(cunpaddedPieceSizeAllocMap)
	runtime.KeepAlive(cpieceFdRawAllocMap)
	runtime.KeepAlive(cregisteredProofAllocMap)
	__v := NewCessGeneratePieceCommitmentResponseRef(unsafe.Pointer(__ret))
	return __v
}

// CessGenerateSingleVanillaProof function as declared in cess-ffi/cesscrypto.h:526
func CessGenerateSingleVanillaProof(replica CessPrivateReplicaInfo, challengesPtr []uint64, challengesLen uint) *CessGenerateSingleVanillaProofResponse {
	creplica, creplicaAllocMap := replica.PassValue()
	cchallengesPtr, cchallengesPtrAllocMap := copyPUint64TBytes((*sliceHeader)(unsafe.Pointer(&challengesPtr)))
	cchallengesLen, cchallengesLenAllocMap := (C.size_t)(challengesLen), cgoAllocsUnknown
	__ret := C.cess_generate_single_vanilla_proof(creplica, cchallengesPtr, cchallengesLen)
	runtime.KeepAlive(cchallengesLenAllocMap)
	runtime.KeepAlive(cchallengesPtrAllocMap)
	runtime.KeepAlive(creplicaAllocMap)
	__v := NewCessGenerateSingleVanillaProofResponseRef(unsafe.Pointer(__ret))
	return __v
}

// CessGenerateSingleWindowPostWithVanilla function as declared in cess-ffi/cesscrypto.h:534
func CessGenerateSingleWindowPostWithVanilla(registeredProof CessRegisteredPoStProof, randomness Cess32ByteArray, proverId Cess32ByteArray, vanillaProofsPtr []CessVanillaProof, vanillaProofsLen uint, partitionIndex uint) *CessGenerateSingleWindowPoStWithVanillaResponse {
	cregisteredProof, cregisteredProofAllocMap := (C.cess_RegisteredPoStProof)(registeredProof), cgoAllocsUnknown
	crandomness, crandomnessAllocMap := randomness.PassValue()
	cproverId, cproverIdAllocMap := proverId.PassValue()
	cvanillaProofsPtr, cvanillaProofsPtrAllocMap := unpackArgSCessVanillaProof(vanillaProofsPtr)
	cvanillaProofsLen, cvanillaProofsLenAllocMap := (C.size_t)(vanillaProofsLen), cgoAllocsUnknown
	cpartitionIndex, cpartitionIndexAllocMap := (C.size_t)(partitionIndex), cgoAllocsUnknown
	__ret := C.cess_generate_single_window_post_with_vanilla(cregisteredProof, crandomness, cproverId, cvanillaProofsPtr, cvanillaProofsLen, cpartitionIndex)
	runtime.KeepAlive(cpartitionIndexAllocMap)
	runtime.KeepAlive(cvanillaProofsLenAllocMap)
	packSCessVanillaProof(vanillaProofsPtr, cvanillaProofsPtr)
	runtime.KeepAlive(cvanillaProofsPtrAllocMap)
	runtime.KeepAlive(cproverIdAllocMap)
	runtime.KeepAlive(crandomnessAllocMap)
	runtime.KeepAlive(cregisteredProofAllocMap)
	__v := NewCessGenerateSingleWindowPoStWithVanillaResponseRef(unsafe.Pointer(__ret))
	return __v
}

// CessGenerateWindowPost function as declared in cess-ffi/cesscrypto.h:545
func CessGenerateWindowPost(randomness Cess32ByteArray, replicasPtr []CessPrivateReplicaInfo, replicasLen uint, proverId Cess32ByteArray) *CessGenerateWindowPoStResponse {
	crandomness, crandomnessAllocMap := randomness.PassValue()
	creplicasPtr, creplicasPtrAllocMap := unpackArgSCessPrivateReplicaInfo(replicasPtr)
	creplicasLen, creplicasLenAllocMap := (C.size_t)(replicasLen), cgoAllocsUnknown
	cproverId, cproverIdAllocMap := proverId.PassValue()
	__ret := C.cess_generate_window_post(crandomness, creplicasPtr, creplicasLen, cproverId)
	runtime.KeepAlive(cproverIdAllocMap)
	runtime.KeepAlive(creplicasLenAllocMap)
	packSCessPrivateReplicaInfo(replicasPtr, creplicasPtr)
	runtime.KeepAlive(creplicasPtrAllocMap)
	runtime.KeepAlive(crandomnessAllocMap)
	__v := NewCessGenerateWindowPoStResponseRef(unsafe.Pointer(__ret))
	return __v
}

// CessGenerateWindowPostWithVanilla function as declared in cess-ffi/cesscrypto.h:554
func CessGenerateWindowPostWithVanilla(registeredProof CessRegisteredPoStProof, randomness Cess32ByteArray, proverId Cess32ByteArray, vanillaProofsPtr []CessVanillaProof, vanillaProofsLen uint) *CessGenerateWindowPoStResponse {
	cregisteredProof, cregisteredProofAllocMap := (C.cess_RegisteredPoStProof)(registeredProof), cgoAllocsUnknown
	crandomness, crandomnessAllocMap := randomness.PassValue()
	cproverId, cproverIdAllocMap := proverId.PassValue()
	cvanillaProofsPtr, cvanillaProofsPtrAllocMap := unpackArgSCessVanillaProof(vanillaProofsPtr)
	cvanillaProofsLen, cvanillaProofsLenAllocMap := (C.size_t)(vanillaProofsLen), cgoAllocsUnknown
	__ret := C.cess_generate_window_post_with_vanilla(cregisteredProof, crandomness, cproverId, cvanillaProofsPtr, cvanillaProofsLen)
	runtime.KeepAlive(cvanillaProofsLenAllocMap)
	packSCessVanillaProof(vanillaProofsPtr, cvanillaProofsPtr)
	runtime.KeepAlive(cvanillaProofsPtrAllocMap)
	runtime.KeepAlive(cproverIdAllocMap)
	runtime.KeepAlive(crandomnessAllocMap)
	runtime.KeepAlive(cregisteredProofAllocMap)
	__v := NewCessGenerateWindowPoStResponseRef(unsafe.Pointer(__ret))
	return __v
}

// CessGenerateWinningPost function as declared in cess-ffi/cesscrypto.h:564
func CessGenerateWinningPost(randomness Cess32ByteArray, replicasPtr []CessPrivateReplicaInfo, replicasLen uint, proverId Cess32ByteArray) *CessGenerateWinningPoStResponse {
	crandomness, crandomnessAllocMap := randomness.PassValue()
	creplicasPtr, creplicasPtrAllocMap := unpackArgSCessPrivateReplicaInfo(replicasPtr)
	creplicasLen, creplicasLenAllocMap := (C.size_t)(replicasLen), cgoAllocsUnknown
	cproverId, cproverIdAllocMap := proverId.PassValue()
	__ret := C.cess_generate_winning_post(crandomness, creplicasPtr, creplicasLen, cproverId)
	runtime.KeepAlive(cproverIdAllocMap)
	runtime.KeepAlive(creplicasLenAllocMap)
	packSCessPrivateReplicaInfo(replicasPtr, creplicasPtr)
	runtime.KeepAlive(creplicasPtrAllocMap)
	runtime.KeepAlive(crandomnessAllocMap)
	__v := NewCessGenerateWinningPoStResponseRef(unsafe.Pointer(__ret))
	return __v
}

// CessGenerateWinningPostSectorChallenge function as declared in cess-ffi/cesscrypto.h:573
func CessGenerateWinningPostSectorChallenge(registeredProof CessRegisteredPoStProof, randomness Cess32ByteArray, sectorSetLen uint64, proverId Cess32ByteArray) *CessGenerateWinningPoStSectorChallenge {
	cregisteredProof, cregisteredProofAllocMap := (C.cess_RegisteredPoStProof)(registeredProof), cgoAllocsUnknown
	crandomness, crandomnessAllocMap := randomness.PassValue()
	csectorSetLen, csectorSetLenAllocMap := (C.uint64_t)(sectorSetLen), cgoAllocsUnknown
	cproverId, cproverIdAllocMap := proverId.PassValue()
	__ret := C.cess_generate_winning_post_sector_challenge(cregisteredProof, crandomness, csectorSetLen, cproverId)
	runtime.KeepAlive(cproverIdAllocMap)
	runtime.KeepAlive(csectorSetLenAllocMap)
	runtime.KeepAlive(crandomnessAllocMap)
	runtime.KeepAlive(cregisteredProofAllocMap)
	__v := NewCessGenerateWinningPoStSectorChallengeRef(unsafe.Pointer(__ret))
	return __v
}

// CessGenerateWinningPostWithVanilla function as declared in cess-ffi/cesscrypto.h:582
func CessGenerateWinningPostWithVanilla(registeredProof CessRegisteredPoStProof, randomness Cess32ByteArray, proverId Cess32ByteArray, vanillaProofsPtr []CessVanillaProof, vanillaProofsLen uint) *CessGenerateWinningPoStResponse {
	cregisteredProof, cregisteredProofAllocMap := (C.cess_RegisteredPoStProof)(registeredProof), cgoAllocsUnknown
	crandomness, crandomnessAllocMap := randomness.PassValue()
	cproverId, cproverIdAllocMap := proverId.PassValue()
	cvanillaProofsPtr, cvanillaProofsPtrAllocMap := unpackArgSCessVanillaProof(vanillaProofsPtr)
	cvanillaProofsLen, cvanillaProofsLenAllocMap := (C.size_t)(vanillaProofsLen), cgoAllocsUnknown
	__ret := C.cess_generate_winning_post_with_vanilla(cregisteredProof, crandomness, cproverId, cvanillaProofsPtr, cvanillaProofsLen)
	runtime.KeepAlive(cvanillaProofsLenAllocMap)
	packSCessVanillaProof(vanillaProofsPtr, cvanillaProofsPtr)
	runtime.KeepAlive(cvanillaProofsPtrAllocMap)
	runtime.KeepAlive(cproverIdAllocMap)
	runtime.KeepAlive(crandomnessAllocMap)
	runtime.KeepAlive(cregisteredProofAllocMap)
	__v := NewCessGenerateWinningPoStResponseRef(unsafe.Pointer(__ret))
	return __v
}

// CessGetGpuDevices function as declared in cess-ffi/cesscrypto.h:591
func CessGetGpuDevices() *CessGpuDeviceResponse {
	__ret := C.cess_get_gpu_devices()
	__v := NewCessGpuDeviceResponseRef(unsafe.Pointer(__ret))
	return __v
}

// CessGetMaxUserBytesPerStagedSector function as declared in cess-ffi/cesscrypto.h:597
func CessGetMaxUserBytesPerStagedSector(registeredProof CessRegisteredSealProof) uint64 {
	cregisteredProof, cregisteredProofAllocMap := (C.cess_RegisteredSealProof)(registeredProof), cgoAllocsUnknown
	__ret := C.cess_get_max_user_bytes_per_staged_sector(cregisteredProof)
	runtime.KeepAlive(cregisteredProofAllocMap)
	__v := (uint64)(__ret)
	return __v
}

// CessGetNumPartitionForFallbackPost function as declared in cess-ffi/cesscrypto.h:603
func CessGetNumPartitionForFallbackPost(registeredProof CessRegisteredPoStProof, numSectors uint) *CessGetNumPartitionForFallbackPoStResponse {
	cregisteredProof, cregisteredProofAllocMap := (C.cess_RegisteredPoStProof)(registeredProof), cgoAllocsUnknown
	cnumSectors, cnumSectorsAllocMap := (C.size_t)(numSectors), cgoAllocsUnknown
	__ret := C.cess_get_num_partition_for_fallback_post(cregisteredProof, cnumSectors)
	runtime.KeepAlive(cnumSectorsAllocMap)
	runtime.KeepAlive(cregisteredProofAllocMap)
	__v := NewCessGetNumPartitionForFallbackPoStResponseRef(unsafe.Pointer(__ret))
	return __v
}

// CessGetPostCircuitIdentifier function as declared in cess-ffi/cesscrypto.h:610
func CessGetPostCircuitIdentifier(registeredProof CessRegisteredPoStProof) *CessStringResponse {
	cregisteredProof, cregisteredProofAllocMap := (C.cess_RegisteredPoStProof)(registeredProof), cgoAllocsUnknown
	__ret := C.cess_get_post_circuit_identifier(cregisteredProof)
	runtime.KeepAlive(cregisteredProofAllocMap)
	__v := NewCessStringResponseRef(unsafe.Pointer(__ret))
	return __v
}

// CessGetPostParamsCid function as declared in cess-ffi/cesscrypto.h:616
func CessGetPostParamsCid(registeredProof CessRegisteredPoStProof) *CessStringResponse {
	cregisteredProof, cregisteredProofAllocMap := (C.cess_RegisteredPoStProof)(registeredProof), cgoAllocsUnknown
	__ret := C.cess_get_post_params_cid(cregisteredProof)
	runtime.KeepAlive(cregisteredProofAllocMap)
	__v := NewCessStringResponseRef(unsafe.Pointer(__ret))
	return __v
}

// CessGetPostParamsPath function as declared in cess-ffi/cesscrypto.h:623
func CessGetPostParamsPath(registeredProof CessRegisteredPoStProof) *CessStringResponse {
	cregisteredProof, cregisteredProofAllocMap := (C.cess_RegisteredPoStProof)(registeredProof), cgoAllocsUnknown
	__ret := C.cess_get_post_params_path(cregisteredProof)
	runtime.KeepAlive(cregisteredProofAllocMap)
	__v := NewCessStringResponseRef(unsafe.Pointer(__ret))
	return __v
}

// CessGetPostVerifyingKeyCid function as declared in cess-ffi/cesscrypto.h:629
func CessGetPostVerifyingKeyCid(registeredProof CessRegisteredPoStProof) *CessStringResponse {
	cregisteredProof, cregisteredProofAllocMap := (C.cess_RegisteredPoStProof)(registeredProof), cgoAllocsUnknown
	__ret := C.cess_get_post_verifying_key_cid(cregisteredProof)
	runtime.KeepAlive(cregisteredProofAllocMap)
	__v := NewCessStringResponseRef(unsafe.Pointer(__ret))
	return __v
}

// CessGetPostVerifyingKeyPath function as declared in cess-ffi/cesscrypto.h:636
func CessGetPostVerifyingKeyPath(registeredProof CessRegisteredPoStProof) *CessStringResponse {
	cregisteredProof, cregisteredProofAllocMap := (C.cess_RegisteredPoStProof)(registeredProof), cgoAllocsUnknown
	__ret := C.cess_get_post_verifying_key_path(cregisteredProof)
	runtime.KeepAlive(cregisteredProofAllocMap)
	__v := NewCessStringResponseRef(unsafe.Pointer(__ret))
	return __v
}

// CessGetPostVersion function as declared in cess-ffi/cesscrypto.h:642
func CessGetPostVersion(registeredProof CessRegisteredPoStProof) *CessStringResponse {
	cregisteredProof, cregisteredProofAllocMap := (C.cess_RegisteredPoStProof)(registeredProof), cgoAllocsUnknown
	__ret := C.cess_get_post_version(cregisteredProof)
	runtime.KeepAlive(cregisteredProofAllocMap)
	__v := NewCessStringResponseRef(unsafe.Pointer(__ret))
	return __v
}

// CessGetSealCircuitIdentifier function as declared in cess-ffi/cesscrypto.h:648
func CessGetSealCircuitIdentifier(registeredProof CessRegisteredSealProof) *CessStringResponse {
	cregisteredProof, cregisteredProofAllocMap := (C.cess_RegisteredSealProof)(registeredProof), cgoAllocsUnknown
	__ret := C.cess_get_seal_circuit_identifier(cregisteredProof)
	runtime.KeepAlive(cregisteredProofAllocMap)
	__v := NewCessStringResponseRef(unsafe.Pointer(__ret))
	return __v
}

// CessGetSealParamsCid function as declared in cess-ffi/cesscrypto.h:654
func CessGetSealParamsCid(registeredProof CessRegisteredSealProof) *CessStringResponse {
	cregisteredProof, cregisteredProofAllocMap := (C.cess_RegisteredSealProof)(registeredProof), cgoAllocsUnknown
	__ret := C.cess_get_seal_params_cid(cregisteredProof)
	runtime.KeepAlive(cregisteredProofAllocMap)
	__v := NewCessStringResponseRef(unsafe.Pointer(__ret))
	return __v
}

// CessGetSealParamsPath function as declared in cess-ffi/cesscrypto.h:661
func CessGetSealParamsPath(registeredProof CessRegisteredSealProof) *CessStringResponse {
	cregisteredProof, cregisteredProofAllocMap := (C.cess_RegisteredSealProof)(registeredProof), cgoAllocsUnknown
	__ret := C.cess_get_seal_params_path(cregisteredProof)
	runtime.KeepAlive(cregisteredProofAllocMap)
	__v := NewCessStringResponseRef(unsafe.Pointer(__ret))
	return __v
}

// CessGetSealVerifyingKeyCid function as declared in cess-ffi/cesscrypto.h:667
func CessGetSealVerifyingKeyCid(registeredProof CessRegisteredSealProof) *CessStringResponse {
	cregisteredProof, cregisteredProofAllocMap := (C.cess_RegisteredSealProof)(registeredProof), cgoAllocsUnknown
	__ret := C.cess_get_seal_verifying_key_cid(cregisteredProof)
	runtime.KeepAlive(cregisteredProofAllocMap)
	__v := NewCessStringResponseRef(unsafe.Pointer(__ret))
	return __v
}

// CessGetSealVerifyingKeyPath function as declared in cess-ffi/cesscrypto.h:674
func CessGetSealVerifyingKeyPath(registeredProof CessRegisteredSealProof) *CessStringResponse {
	cregisteredProof, cregisteredProofAllocMap := (C.cess_RegisteredSealProof)(registeredProof), cgoAllocsUnknown
	__ret := C.cess_get_seal_verifying_key_path(cregisteredProof)
	runtime.KeepAlive(cregisteredProofAllocMap)
	__v := NewCessStringResponseRef(unsafe.Pointer(__ret))
	return __v
}

// CessGetSealVersion function as declared in cess-ffi/cesscrypto.h:680
func CessGetSealVersion(registeredProof CessRegisteredSealProof) *CessStringResponse {
	cregisteredProof, cregisteredProofAllocMap := (C.cess_RegisteredSealProof)(registeredProof), cgoAllocsUnknown
	__ret := C.cess_get_seal_version(cregisteredProof)
	runtime.KeepAlive(cregisteredProofAllocMap)
	__v := NewCessStringResponseRef(unsafe.Pointer(__ret))
	return __v
}

// CessHash function as declared in cess-ffi/cesscrypto.h:690
func CessHash(messagePtr []byte, messageLen uint) *CessHashResponse {
	cmessagePtr, cmessagePtrAllocMap := copyPUint8TBytes((*sliceHeader)(unsafe.Pointer(&messagePtr)))
	cmessageLen, cmessageLenAllocMap := (C.size_t)(messageLen), cgoAllocsUnknown
	__ret := C.cess_hash(cmessagePtr, cmessageLen)
	runtime.KeepAlive(cmessageLenAllocMap)
	runtime.KeepAlive(cmessagePtrAllocMap)
	__v := NewCessHashResponseRef(unsafe.Pointer(__ret))
	return __v
}

// CessHashVerify function as declared in cess-ffi/cesscrypto.h:704
func CessHashVerify(signaturePtr []byte, flattenedMessagesPtr []byte, flattenedMessagesLen uint, messageSizesPtr []uint, messageSizesLen uint, flattenedPublicKeysPtr []byte, flattenedPublicKeysLen uint) int32 {
	csignaturePtr, csignaturePtrAllocMap := copyPUint8TBytes((*sliceHeader)(unsafe.Pointer(&signaturePtr)))
	cflattenedMessagesPtr, cflattenedMessagesPtrAllocMap := copyPUint8TBytes((*sliceHeader)(unsafe.Pointer(&flattenedMessagesPtr)))
	cflattenedMessagesLen, cflattenedMessagesLenAllocMap := (C.size_t)(flattenedMessagesLen), cgoAllocsUnknown
	cmessageSizesPtr, cmessageSizesPtrAllocMap := copyPSizeTBytes((*sliceHeader)(unsafe.Pointer(&messageSizesPtr)))
	cmessageSizesLen, cmessageSizesLenAllocMap := (C.size_t)(messageSizesLen), cgoAllocsUnknown
	cflattenedPublicKeysPtr, cflattenedPublicKeysPtrAllocMap := copyPUint8TBytes((*sliceHeader)(unsafe.Pointer(&flattenedPublicKeysPtr)))
	cflattenedPublicKeysLen, cflattenedPublicKeysLenAllocMap := (C.size_t)(flattenedPublicKeysLen), cgoAllocsUnknown
	__ret := C.cess_hash_verify(csignaturePtr, cflattenedMessagesPtr, cflattenedMessagesLen, cmessageSizesPtr, cmessageSizesLen, cflattenedPublicKeysPtr, cflattenedPublicKeysLen)
	runtime.KeepAlive(cflattenedPublicKeysLenAllocMap)
	runtime.KeepAlive(cflattenedPublicKeysPtrAllocMap)
	runtime.KeepAlive(cmessageSizesLenAllocMap)
	runtime.KeepAlive(cmessageSizesPtrAllocMap)
	runtime.KeepAlive(cflattenedMessagesLenAllocMap)
	runtime.KeepAlive(cflattenedMessagesPtrAllocMap)
	runtime.KeepAlive(csignaturePtrAllocMap)
	__v := (int32)(__ret)
	return __v
}

// CessInitLogFd function as declared in cess-ffi/cesscrypto.h:721
func CessInitLogFd(logFd int32) *CessInitLogFdResponse {
	clogFd, clogFdAllocMap := (C.int)(logFd), cgoAllocsUnknown
	__ret := C.cess_init_log_fd(clogFd)
	runtime.KeepAlive(clogFdAllocMap)
	__v := NewCessInitLogFdResponseRef(unsafe.Pointer(__ret))
	return __v
}

// CessMergeWindowPostPartitionProofs function as declared in cess-ffi/cesscrypto.h:727
func CessMergeWindowPostPartitionProofs(registeredProof CessRegisteredPoStProof, partitionProofsPtr []CessPartitionSnarkProof, partitionProofsLen uint) *CessMergeWindowPoStPartitionProofsResponse {
	cregisteredProof, cregisteredProofAllocMap := (C.cess_RegisteredPoStProof)(registeredProof), cgoAllocsUnknown
	cpartitionProofsPtr, cpartitionProofsPtrAllocMap := unpackArgSCessPartitionSnarkProof(partitionProofsPtr)
	cpartitionProofsLen, cpartitionProofsLenAllocMap := (C.size_t)(partitionProofsLen), cgoAllocsUnknown
	__ret := C.cess_merge_window_post_partition_proofs(cregisteredProof, cpartitionProofsPtr, cpartitionProofsLen)
	runtime.KeepAlive(cpartitionProofsLenAllocMap)
	packSCessPartitionSnarkProof(partitionProofsPtr, cpartitionProofsPtr)
	runtime.KeepAlive(cpartitionProofsPtrAllocMap)
	runtime.KeepAlive(cregisteredProofAllocMap)
	__v := NewCessMergeWindowPoStPartitionProofsResponseRef(unsafe.Pointer(__ret))
	return __v
}

// CessPrivateKeyGenerate function as declared in cess-ffi/cesscrypto.h:734
func CessPrivateKeyGenerate() *CessPrivateKeyGenerateResponse {
	__ret := C.cess_private_key_generate()
	__v := NewCessPrivateKeyGenerateResponseRef(unsafe.Pointer(__ret))
	return __v
}

// CessPrivateKeyGenerateWithSeed function as declared in cess-ffi/cesscrypto.h:747
func CessPrivateKeyGenerateWithSeed(rawSeed Cess32ByteArray) *CessPrivateKeyGenerateResponse {
	crawSeed, crawSeedAllocMap := rawSeed.PassValue()
	__ret := C.cess_private_key_generate_with_seed(crawSeed)
	runtime.KeepAlive(crawSeedAllocMap)
	__v := NewCessPrivateKeyGenerateResponseRef(unsafe.Pointer(__ret))
	return __v
}

// CessPrivateKeyPublicKey function as declared in cess-ffi/cesscrypto.h:758
func CessPrivateKeyPublicKey(rawPrivateKeyPtr []byte) *CessPrivateKeyPublicKeyResponse {
	crawPrivateKeyPtr, crawPrivateKeyPtrAllocMap := copyPUint8TBytes((*sliceHeader)(unsafe.Pointer(&rawPrivateKeyPtr)))
	__ret := C.cess_private_key_public_key(crawPrivateKeyPtr)
	runtime.KeepAlive(crawPrivateKeyPtrAllocMap)
	__v := NewCessPrivateKeyPublicKeyResponseRef(unsafe.Pointer(__ret))
	return __v
}

// CessPrivateKeySign function as declared in cess-ffi/cesscrypto.h:771
func CessPrivateKeySign(rawPrivateKeyPtr []byte, messagePtr []byte, messageLen uint) *CessPrivateKeySignResponse {
	crawPrivateKeyPtr, crawPrivateKeyPtrAllocMap := copyPUint8TBytes((*sliceHeader)(unsafe.Pointer(&rawPrivateKeyPtr)))
	cmessagePtr, cmessagePtrAllocMap := copyPUint8TBytes((*sliceHeader)(unsafe.Pointer(&messagePtr)))
	cmessageLen, cmessageLenAllocMap := (C.size_t)(messageLen), cgoAllocsUnknown
	__ret := C.cess_private_key_sign(crawPrivateKeyPtr, cmessagePtr, cmessageLen)
	runtime.KeepAlive(cmessageLenAllocMap)
	runtime.KeepAlive(cmessagePtrAllocMap)
	runtime.KeepAlive(crawPrivateKeyPtrAllocMap)
	__v := NewCessPrivateKeySignResponseRef(unsafe.Pointer(__ret))
	return __v
}

// CessSealCommitPhase1 function as declared in cess-ffi/cesscrypto.h:779
func CessSealCommitPhase1(registeredProof CessRegisteredSealProof, commR Cess32ByteArray, commD Cess32ByteArray, cacheDirPath string, replicaPath string, sectorId uint64, proverId Cess32ByteArray, ticket Cess32ByteArray, seed Cess32ByteArray, piecesPtr []CessPublicPieceInfo, piecesLen uint) *CessSealCommitPhase1Response {
	cregisteredProof, cregisteredProofAllocMap := (C.cess_RegisteredSealProof)(registeredProof), cgoAllocsUnknown
	ccommR, ccommRAllocMap := commR.PassValue()
	ccommD, ccommDAllocMap := commD.PassValue()
	cacheDirPath = safeString(cacheDirPath)
	ccacheDirPath, ccacheDirPathAllocMap := unpackPCharString(cacheDirPath)
	replicaPath = safeString(replicaPath)
	creplicaPath, creplicaPathAllocMap := unpackPCharString(replicaPath)
	csectorId, csectorIdAllocMap := (C.uint64_t)(sectorId), cgoAllocsUnknown
	cproverId, cproverIdAllocMap := proverId.PassValue()
	cticket, cticketAllocMap := ticket.PassValue()
	cseed, cseedAllocMap := seed.PassValue()
	cpiecesPtr, cpiecesPtrAllocMap := unpackArgSCessPublicPieceInfo(piecesPtr)
	cpiecesLen, cpiecesLenAllocMap := (C.size_t)(piecesLen), cgoAllocsUnknown
	__ret := C.cess_seal_commit_phase1(cregisteredProof, ccommR, ccommD, ccacheDirPath, creplicaPath, csectorId, cproverId, cticket, cseed, cpiecesPtr, cpiecesLen)
	runtime.KeepAlive(cpiecesLenAllocMap)
	packSCessPublicPieceInfo(piecesPtr, cpiecesPtr)
	runtime.KeepAlive(cpiecesPtrAllocMap)
	runtime.KeepAlive(cseedAllocMap)
	runtime.KeepAlive(cticketAllocMap)
	runtime.KeepAlive(cproverIdAllocMap)
	runtime.KeepAlive(csectorIdAllocMap)
	runtime.KeepAlive(replicaPath)
	runtime.KeepAlive(creplicaPathAllocMap)
	runtime.KeepAlive(cacheDirPath)
	runtime.KeepAlive(ccacheDirPathAllocMap)
	runtime.KeepAlive(ccommDAllocMap)
	runtime.KeepAlive(ccommRAllocMap)
	runtime.KeepAlive(cregisteredProofAllocMap)
	__v := NewCessSealCommitPhase1ResponseRef(unsafe.Pointer(__ret))
	return __v
}

// CessSealCommitPhase2 function as declared in cess-ffi/cesscrypto.h:791
func CessSealCommitPhase2(sealCommitPhase1OutputPtr []byte, sealCommitPhase1OutputLen uint, sectorId uint64, proverId Cess32ByteArray) *CessSealCommitPhase2Response {
	csealCommitPhase1OutputPtr, csealCommitPhase1OutputPtrAllocMap := copyPUint8TBytes((*sliceHeader)(unsafe.Pointer(&sealCommitPhase1OutputPtr)))
	csealCommitPhase1OutputLen, csealCommitPhase1OutputLenAllocMap := (C.size_t)(sealCommitPhase1OutputLen), cgoAllocsUnknown
	csectorId, csectorIdAllocMap := (C.uint64_t)(sectorId), cgoAllocsUnknown
	cproverId, cproverIdAllocMap := proverId.PassValue()
	__ret := C.cess_seal_commit_phase2(csealCommitPhase1OutputPtr, csealCommitPhase1OutputLen, csectorId, cproverId)
	runtime.KeepAlive(cproverIdAllocMap)
	runtime.KeepAlive(csectorIdAllocMap)
	runtime.KeepAlive(csealCommitPhase1OutputLenAllocMap)
	runtime.KeepAlive(csealCommitPhase1OutputPtrAllocMap)
	__v := NewCessSealCommitPhase2ResponseRef(unsafe.Pointer(__ret))
	return __v
}

// CessSealPreCommitPhase1 function as declared in cess-ffi/cesscrypto.h:800
func CessSealPreCommitPhase1(registeredProof CessRegisteredSealProof, cacheDirPath string, stagedSectorPath string, sealedSectorPath string, sectorId uint64, proverId Cess32ByteArray, ticket Cess32ByteArray, piecesPtr []CessPublicPieceInfo, piecesLen uint) *CessSealPreCommitPhase1Response {
	cregisteredProof, cregisteredProofAllocMap := (C.cess_RegisteredSealProof)(registeredProof), cgoAllocsUnknown
	cacheDirPath = safeString(cacheDirPath)
	ccacheDirPath, ccacheDirPathAllocMap := unpackPCharString(cacheDirPath)
	stagedSectorPath = safeString(stagedSectorPath)
	cstagedSectorPath, cstagedSectorPathAllocMap := unpackPCharString(stagedSectorPath)
	sealedSectorPath = safeString(sealedSectorPath)
	csealedSectorPath, csealedSectorPathAllocMap := unpackPCharString(sealedSectorPath)
	csectorId, csectorIdAllocMap := (C.uint64_t)(sectorId), cgoAllocsUnknown
	cproverId, cproverIdAllocMap := proverId.PassValue()
	cticket, cticketAllocMap := ticket.PassValue()
	cpiecesPtr, cpiecesPtrAllocMap := unpackArgSCessPublicPieceInfo(piecesPtr)
	cpiecesLen, cpiecesLenAllocMap := (C.size_t)(piecesLen), cgoAllocsUnknown
	__ret := C.cess_seal_pre_commit_phase1(cregisteredProof, ccacheDirPath, cstagedSectorPath, csealedSectorPath, csectorId, cproverId, cticket, cpiecesPtr, cpiecesLen)
	runtime.KeepAlive(cpiecesLenAllocMap)
	packSCessPublicPieceInfo(piecesPtr, cpiecesPtr)
	runtime.KeepAlive(cpiecesPtrAllocMap)
	runtime.KeepAlive(cticketAllocMap)
	runtime.KeepAlive(cproverIdAllocMap)
	runtime.KeepAlive(csectorIdAllocMap)
	runtime.KeepAlive(sealedSectorPath)
	runtime.KeepAlive(csealedSectorPathAllocMap)
	runtime.KeepAlive(stagedSectorPath)
	runtime.KeepAlive(cstagedSectorPathAllocMap)
	runtime.KeepAlive(cacheDirPath)
	runtime.KeepAlive(ccacheDirPathAllocMap)
	runtime.KeepAlive(cregisteredProofAllocMap)
	__v := NewCessSealPreCommitPhase1ResponseRef(unsafe.Pointer(__ret))
	return __v
}

// CessSealPreCommitPhase2 function as declared in cess-ffi/cesscrypto.h:814
func CessSealPreCommitPhase2(sealPreCommitPhase1OutputPtr []byte, sealPreCommitPhase1OutputLen uint, cacheDirPath string, sealedSectorPath string) *CessSealPreCommitPhase2Response {
	csealPreCommitPhase1OutputPtr, csealPreCommitPhase1OutputPtrAllocMap := copyPUint8TBytes((*sliceHeader)(unsafe.Pointer(&sealPreCommitPhase1OutputPtr)))
	csealPreCommitPhase1OutputLen, csealPreCommitPhase1OutputLenAllocMap := (C.size_t)(sealPreCommitPhase1OutputLen), cgoAllocsUnknown
	cacheDirPath = safeString(cacheDirPath)
	ccacheDirPath, ccacheDirPathAllocMap := unpackPCharString(cacheDirPath)
	sealedSectorPath = safeString(sealedSectorPath)
	csealedSectorPath, csealedSectorPathAllocMap := unpackPCharString(sealedSectorPath)
	__ret := C.cess_seal_pre_commit_phase2(csealPreCommitPhase1OutputPtr, csealPreCommitPhase1OutputLen, ccacheDirPath, csealedSectorPath)
	runtime.KeepAlive(sealedSectorPath)
	runtime.KeepAlive(csealedSectorPathAllocMap)
	runtime.KeepAlive(cacheDirPath)
	runtime.KeepAlive(ccacheDirPathAllocMap)
	runtime.KeepAlive(csealPreCommitPhase1OutputLenAllocMap)
	runtime.KeepAlive(csealPreCommitPhase1OutputPtrAllocMap)
	__v := NewCessSealPreCommitPhase2ResponseRef(unsafe.Pointer(__ret))
	return __v
}

// CessUnsealRange function as declared in cess-ffi/cesscrypto.h:822
func CessUnsealRange(registeredProof CessRegisteredSealProof, cacheDirPath string, sealedSectorFdRaw int32, unsealOutputFdRaw int32, sectorId uint64, proverId Cess32ByteArray, ticket Cess32ByteArray, commD Cess32ByteArray, unpaddedByteIndex uint64, unpaddedBytesAmount uint64) *CessUnsealRangeResponse {
	cregisteredProof, cregisteredProofAllocMap := (C.cess_RegisteredSealProof)(registeredProof), cgoAllocsUnknown
	cacheDirPath = safeString(cacheDirPath)
	ccacheDirPath, ccacheDirPathAllocMap := unpackPCharString(cacheDirPath)
	csealedSectorFdRaw, csealedSectorFdRawAllocMap := (C.int)(sealedSectorFdRaw), cgoAllocsUnknown
	cunsealOutputFdRaw, cunsealOutputFdRawAllocMap := (C.int)(unsealOutputFdRaw), cgoAllocsUnknown
	csectorId, csectorIdAllocMap := (C.uint64_t)(sectorId), cgoAllocsUnknown
	cproverId, cproverIdAllocMap := proverId.PassValue()
	cticket, cticketAllocMap := ticket.PassValue()
	ccommD, ccommDAllocMap := commD.PassValue()
	cunpaddedByteIndex, cunpaddedByteIndexAllocMap := (C.uint64_t)(unpaddedByteIndex), cgoAllocsUnknown
	cunpaddedBytesAmount, cunpaddedBytesAmountAllocMap := (C.uint64_t)(unpaddedBytesAmount), cgoAllocsUnknown
	__ret := C.cess_unseal_range(cregisteredProof, ccacheDirPath, csealedSectorFdRaw, cunsealOutputFdRaw, csectorId, cproverId, cticket, ccommD, cunpaddedByteIndex, cunpaddedBytesAmount)
	runtime.KeepAlive(cunpaddedBytesAmountAllocMap)
	runtime.KeepAlive(cunpaddedByteIndexAllocMap)
	runtime.KeepAlive(ccommDAllocMap)
	runtime.KeepAlive(cticketAllocMap)
	runtime.KeepAlive(cproverIdAllocMap)
	runtime.KeepAlive(csectorIdAllocMap)
	runtime.KeepAlive(cunsealOutputFdRawAllocMap)
	runtime.KeepAlive(csealedSectorFdRawAllocMap)
	runtime.KeepAlive(cacheDirPath)
	runtime.KeepAlive(ccacheDirPathAllocMap)
	runtime.KeepAlive(cregisteredProofAllocMap)
	__v := NewCessUnsealRangeResponseRef(unsafe.Pointer(__ret))
	return __v
}

// CessVerify function as declared in cess-ffi/cesscrypto.h:844
func CessVerify(signaturePtr []byte, flattenedDigestsPtr []byte, flattenedDigestsLen uint, flattenedPublicKeysPtr []byte, flattenedPublicKeysLen uint) int32 {
	csignaturePtr, csignaturePtrAllocMap := copyPUint8TBytes((*sliceHeader)(unsafe.Pointer(&signaturePtr)))
	cflattenedDigestsPtr, cflattenedDigestsPtrAllocMap := copyPUint8TBytes((*sliceHeader)(unsafe.Pointer(&flattenedDigestsPtr)))
	cflattenedDigestsLen, cflattenedDigestsLenAllocMap := (C.size_t)(flattenedDigestsLen), cgoAllocsUnknown
	cflattenedPublicKeysPtr, cflattenedPublicKeysPtrAllocMap := copyPUint8TBytes((*sliceHeader)(unsafe.Pointer(&flattenedPublicKeysPtr)))
	cflattenedPublicKeysLen, cflattenedPublicKeysLenAllocMap := (C.size_t)(flattenedPublicKeysLen), cgoAllocsUnknown
	__ret := C.cess_verify(csignaturePtr, cflattenedDigestsPtr, cflattenedDigestsLen, cflattenedPublicKeysPtr, cflattenedPublicKeysLen)
	runtime.KeepAlive(cflattenedPublicKeysLenAllocMap)
	runtime.KeepAlive(cflattenedPublicKeysPtrAllocMap)
	runtime.KeepAlive(cflattenedDigestsLenAllocMap)
	runtime.KeepAlive(cflattenedDigestsPtrAllocMap)
	runtime.KeepAlive(csignaturePtrAllocMap)
	__v := (int32)(__ret)
	return __v
}

// CessVerifyAggregateSealProof function as declared in cess-ffi/cesscrypto.h:854
func CessVerifyAggregateSealProof(registeredProof CessRegisteredSealProof, registeredAggregation CessRegisteredAggregationProof, proverId Cess32ByteArray, proofPtr []byte, proofLen uint, commitInputsPtr []CessAggregationInputs, commitInputsLen uint) *CessVerifyAggregateSealProofResponse {
	cregisteredProof, cregisteredProofAllocMap := (C.cess_RegisteredSealProof)(registeredProof), cgoAllocsUnknown
	cregisteredAggregation, cregisteredAggregationAllocMap := (C.cess_RegisteredAggregationProof)(registeredAggregation), cgoAllocsUnknown
	cproverId, cproverIdAllocMap := proverId.PassValue()
	cproofPtr, cproofPtrAllocMap := copyPUint8TBytes((*sliceHeader)(unsafe.Pointer(&proofPtr)))
	cproofLen, cproofLenAllocMap := (C.size_t)(proofLen), cgoAllocsUnknown
	ccommitInputsPtr, ccommitInputsPtrAllocMap := unpackArgSCessAggregationInputs(commitInputsPtr)
	ccommitInputsLen, ccommitInputsLenAllocMap := (C.size_t)(commitInputsLen), cgoAllocsUnknown
	__ret := C.cess_verify_aggregate_seal_proof(cregisteredProof, cregisteredAggregation, cproverId, cproofPtr, cproofLen, ccommitInputsPtr, ccommitInputsLen)
	runtime.KeepAlive(ccommitInputsLenAllocMap)
	packSCessAggregationInputs(commitInputsPtr, ccommitInputsPtr)
	runtime.KeepAlive(ccommitInputsPtrAllocMap)
	runtime.KeepAlive(cproofLenAllocMap)
	runtime.KeepAlive(cproofPtrAllocMap)
	runtime.KeepAlive(cproverIdAllocMap)
	runtime.KeepAlive(cregisteredAggregationAllocMap)
	runtime.KeepAlive(cregisteredProofAllocMap)
	__v := NewCessVerifyAggregateSealProofResponseRef(unsafe.Pointer(__ret))
	return __v
}

// CessVerifySeal function as declared in cess-ffi/cesscrypto.h:866
func CessVerifySeal(registeredProof CessRegisteredSealProof, commR Cess32ByteArray, commD Cess32ByteArray, proverId Cess32ByteArray, ticket Cess32ByteArray, seed Cess32ByteArray, sectorId uint64, proofPtr []byte, proofLen uint) *CessVerifySealResponse {
	cregisteredProof, cregisteredProofAllocMap := (C.cess_RegisteredSealProof)(registeredProof), cgoAllocsUnknown
	ccommR, ccommRAllocMap := commR.PassValue()
	ccommD, ccommDAllocMap := commD.PassValue()
	cproverId, cproverIdAllocMap := proverId.PassValue()
	cticket, cticketAllocMap := ticket.PassValue()
	cseed, cseedAllocMap := seed.PassValue()
	csectorId, csectorIdAllocMap := (C.uint64_t)(sectorId), cgoAllocsUnknown
	cproofPtr, cproofPtrAllocMap := copyPUint8TBytes((*sliceHeader)(unsafe.Pointer(&proofPtr)))
	cproofLen, cproofLenAllocMap := (C.size_t)(proofLen), cgoAllocsUnknown
	__ret := C.cess_verify_seal(cregisteredProof, ccommR, ccommD, cproverId, cticket, cseed, csectorId, cproofPtr, cproofLen)
	runtime.KeepAlive(cproofLenAllocMap)
	runtime.KeepAlive(cproofPtrAllocMap)
	runtime.KeepAlive(csectorIdAllocMap)
	runtime.KeepAlive(cseedAllocMap)
	runtime.KeepAlive(cticketAllocMap)
	runtime.KeepAlive(cproverIdAllocMap)
	runtime.KeepAlive(ccommDAllocMap)
	runtime.KeepAlive(ccommRAllocMap)
	runtime.KeepAlive(cregisteredProofAllocMap)
	__v := NewCessVerifySealResponseRef(unsafe.Pointer(__ret))
	return __v
}

// CessVerifyWindowPost function as declared in cess-ffi/cesscrypto.h:879
func CessVerifyWindowPost(randomness Cess32ByteArray, replicasPtr []CessPublicReplicaInfo, replicasLen uint, proofsPtr []CessPoStProof, proofsLen uint, proverId Cess32ByteArray) *CessVerifyWindowPoStResponse {
	crandomness, crandomnessAllocMap := randomness.PassValue()
	creplicasPtr, creplicasPtrAllocMap := unpackArgSCessPublicReplicaInfo(replicasPtr)
	creplicasLen, creplicasLenAllocMap := (C.size_t)(replicasLen), cgoAllocsUnknown
	cproofsPtr, cproofsPtrAllocMap := unpackArgSCessPoStProof(proofsPtr)
	cproofsLen, cproofsLenAllocMap := (C.size_t)(proofsLen), cgoAllocsUnknown
	cproverId, cproverIdAllocMap := proverId.PassValue()
	__ret := C.cess_verify_window_post(crandomness, creplicasPtr, creplicasLen, cproofsPtr, cproofsLen, cproverId)
	runtime.KeepAlive(cproverIdAllocMap)
	runtime.KeepAlive(cproofsLenAllocMap)
	packSCessPoStProof(proofsPtr, cproofsPtr)
	runtime.KeepAlive(cproofsPtrAllocMap)
	runtime.KeepAlive(creplicasLenAllocMap)
	packSCessPublicReplicaInfo(replicasPtr, creplicasPtr)
	runtime.KeepAlive(creplicasPtrAllocMap)
	runtime.KeepAlive(crandomnessAllocMap)
	__v := NewCessVerifyWindowPoStResponseRef(unsafe.Pointer(__ret))
	return __v
}

// CessVerifyWinningPost function as declared in cess-ffi/cesscrypto.h:889
func CessVerifyWinningPost(randomness Cess32ByteArray, replicasPtr []CessPublicReplicaInfo, replicasLen uint, proofsPtr []CessPoStProof, proofsLen uint, proverId Cess32ByteArray) *CessVerifyWinningPoStResponse {
	crandomness, crandomnessAllocMap := randomness.PassValue()
	creplicasPtr, creplicasPtrAllocMap := unpackArgSCessPublicReplicaInfo(replicasPtr)
	creplicasLen, creplicasLenAllocMap := (C.size_t)(replicasLen), cgoAllocsUnknown
	cproofsPtr, cproofsPtrAllocMap := unpackArgSCessPoStProof(proofsPtr)
	cproofsLen, cproofsLenAllocMap := (C.size_t)(proofsLen), cgoAllocsUnknown
	cproverId, cproverIdAllocMap := proverId.PassValue()
	__ret := C.cess_verify_winning_post(crandomness, creplicasPtr, creplicasLen, cproofsPtr, cproofsLen, cproverId)
	runtime.KeepAlive(cproverIdAllocMap)
	runtime.KeepAlive(cproofsLenAllocMap)
	packSCessPoStProof(proofsPtr, cproofsPtr)
	runtime.KeepAlive(cproofsPtrAllocMap)
	runtime.KeepAlive(creplicasLenAllocMap)
	packSCessPublicReplicaInfo(replicasPtr, creplicasPtr)
	runtime.KeepAlive(creplicasPtrAllocMap)
	runtime.KeepAlive(crandomnessAllocMap)
	__v := NewCessVerifyWinningPoStResponseRef(unsafe.Pointer(__ret))
	return __v
}

// CessWriteWithAlignment function as declared in cess-ffi/cesscrypto.h:900
func CessWriteWithAlignment(registeredProof CessRegisteredSealProof, srcFd int32, srcSize uint64, dstFd int32, existingPieceSizesPtr []uint64, existingPieceSizesLen uint) *CessWriteWithAlignmentResponse {
	cregisteredProof, cregisteredProofAllocMap := (C.cess_RegisteredSealProof)(registeredProof), cgoAllocsUnknown
	csrcFd, csrcFdAllocMap := (C.int)(srcFd), cgoAllocsUnknown
	csrcSize, csrcSizeAllocMap := (C.uint64_t)(srcSize), cgoAllocsUnknown
	cdstFd, cdstFdAllocMap := (C.int)(dstFd), cgoAllocsUnknown
	cexistingPieceSizesPtr, cexistingPieceSizesPtrAllocMap := copyPUint64TBytes((*sliceHeader)(unsafe.Pointer(&existingPieceSizesPtr)))
	cexistingPieceSizesLen, cexistingPieceSizesLenAllocMap := (C.size_t)(existingPieceSizesLen), cgoAllocsUnknown
	__ret := C.cess_write_with_alignment(cregisteredProof, csrcFd, csrcSize, cdstFd, cexistingPieceSizesPtr, cexistingPieceSizesLen)
	runtime.KeepAlive(cexistingPieceSizesLenAllocMap)
	runtime.KeepAlive(cexistingPieceSizesPtrAllocMap)
	runtime.KeepAlive(cdstFdAllocMap)
	runtime.KeepAlive(csrcSizeAllocMap)
	runtime.KeepAlive(csrcFdAllocMap)
	runtime.KeepAlive(cregisteredProofAllocMap)
	__v := NewCessWriteWithAlignmentResponseRef(unsafe.Pointer(__ret))
	return __v
}

// CessWriteWithoutAlignment function as declared in cess-ffi/cesscrypto.h:911
func CessWriteWithoutAlignment(registeredProof CessRegisteredSealProof, srcFd int32, srcSize uint64, dstFd int32) *CessWriteWithoutAlignmentResponse {
	cregisteredProof, cregisteredProofAllocMap := (C.cess_RegisteredSealProof)(registeredProof), cgoAllocsUnknown
	csrcFd, csrcFdAllocMap := (C.int)(srcFd), cgoAllocsUnknown
	csrcSize, csrcSizeAllocMap := (C.uint64_t)(srcSize), cgoAllocsUnknown
	cdstFd, cdstFdAllocMap := (C.int)(dstFd), cgoAllocsUnknown
	__ret := C.cess_write_without_alignment(cregisteredProof, csrcFd, csrcSize, cdstFd)
	runtime.KeepAlive(cdstFdAllocMap)
	runtime.KeepAlive(csrcSizeAllocMap)
	runtime.KeepAlive(csrcFdAllocMap)
	runtime.KeepAlive(cregisteredProofAllocMap)
	__v := NewCessWriteWithoutAlignmentResponseRef(unsafe.Pointer(__ret))
	return __v
}
